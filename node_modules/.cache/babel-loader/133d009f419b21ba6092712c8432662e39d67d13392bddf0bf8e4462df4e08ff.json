{"ast":null,"code":"var _jsxFileName = \"/home/draber/Development/Phase-5/Inkd-Up/src/components/ProfileManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport UserEdit from \"./UserEdit\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProfileManager({\n  loggedIn,\n  setLoggedIn,\n  setUsers\n}) {\n  _s();\n  const history = useHistory();\n  const [message, setMessage] = useState('');\n  const [isClient, setIsClient] = useState(false);\n  const [isArtist, setIsArtist] = useState(false);\n  const [isShop, setIsShop] = useState(false);\n\n  // const initialValues = {\n  //     username: `${loggedIn.username}`,\n  //     email: `${loggedIn.email}`,\n  //     password: `${loggedIn.password}`,\n  //     confirmPassword: `${loggedIn.password}`,\n  // };\n\n  // const validationSchema = Yup.object().shape({\n  //     username: Yup.string().required('Required'),\n  //     email: Yup.string().email('Invalid email address').required('Required'),\n  //     password: Yup.string().required('Required'),\n  //     confirmPassword: Yup.string()\n  //         .oneOf([Yup.ref('password'), null], 'Passwords must match')\n  //         .required('Required'),\n  // });\n  // console.log(loggedIn.id)\n  // const handleSubmit = async (values, { setSubmitting }) => {\n  //     try {\n  //         const response = await fetch(`/user/${loggedIn.id}`, {\n  //             method: 'PATCH',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify(values),\n  //         });\n  //         console.log(response)\n  //         if (response.ok) {\n  //             const updatedUser = await response.json();\n  //             setMessage('Update successful. Redirecting to home...');\n  //             setLoggedIn(updatedUser);\n  //             setTimeout(() => {\n  //                 history.push(`/account_home/${updatedUser.username}`);\n  //             }, 2000);\n  //         } else {\n  //             const error = await response.json();\n  //             console.error('User update failed:', error);\n  //         }\n  //     } catch (error) {\n  //         console.error('Error during User update:', error);\n  //     }\n\n  //     setSubmitting(false);\n  // }\n\n  // function handleDeleteUser(id) {\n  //     fetch(`/users/${id}`, { method: \"DELETE\" }).then((resp) => {\n  //         console.log(resp)\n  //         if (resp.ok) {\n  //             setUsers((userArr) =>\n  //                 userArr.filter((user) => user.id !== id)\n  //             );\n  //             alert(`user ${loggedIn.username} Deleted!`)\n  //             history.push('/')\n  //         }\n  //     });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(UserEdit, {\n        loggedIn: loggedIn,\n        setLoggedIn: setLoggedIn,\n        setUsers: setUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(ProfileManager, \"5xpt+3HNhBPGV2Vis4MT/rTEbpY=\", false, function () {\n  return [useHistory];\n});\n_c = ProfileManager;\nexport default ProfileManager;\nvar _c;\n$RefreshReg$(_c, \"ProfileManager\");","map":{"version":3,"names":["React","useState","useHistory","Formik","Field","Form","ErrorMessage","UserEdit","Yup","jsxDEV","_jsxDEV","ProfileManager","loggedIn","setLoggedIn","setUsers","_s","history","message","setMessage","isClient","setIsClient","isArtist","setIsArtist","isShop","setIsShop","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/draber/Development/Phase-5/Inkd-Up/src/components/ProfileManager.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport UserEdit from \"./UserEdit\";\nimport * as Yup from 'yup';\n\nfunction ProfileManager({ loggedIn, setLoggedIn, setUsers }) {\n    const history = useHistory()\n    const [message, setMessage] = useState('');\n    const [isClient, setIsClient] = useState(false)\n    const [isArtist, setIsArtist] = useState(false)\n    const [isShop, setIsShop] = useState(false)\n\n    // const initialValues = {\n    //     username: `${loggedIn.username}`,\n    //     email: `${loggedIn.email}`,\n    //     password: `${loggedIn.password}`,\n    //     confirmPassword: `${loggedIn.password}`,\n    // };\n\n    // const validationSchema = Yup.object().shape({\n    //     username: Yup.string().required('Required'),\n    //     email: Yup.string().email('Invalid email address').required('Required'),\n    //     password: Yup.string().required('Required'),\n    //     confirmPassword: Yup.string()\n    //         .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    //         .required('Required'),\n    // });\n    // console.log(loggedIn.id)\n    // const handleSubmit = async (values, { setSubmitting }) => {\n    //     try {\n    //         const response = await fetch(`/user/${loggedIn.id}`, {\n    //             method: 'PATCH',\n    //             headers: {\n    //                 'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify(values),\n    //         });\n    //         console.log(response)\n    //         if (response.ok) {\n    //             const updatedUser = await response.json();\n    //             setMessage('Update successful. Redirecting to home...');\n    //             setLoggedIn(updatedUser);\n    //             setTimeout(() => {\n    //                 history.push(`/account_home/${updatedUser.username}`);\n    //             }, 2000);\n    //         } else {\n    //             const error = await response.json();\n    //             console.error('User update failed:', error);\n    //         }\n    //     } catch (error) {\n    //         console.error('Error during User update:', error);\n    //     }\n\n    //     setSubmitting(false);\n    // }\n\n\n    // function handleDeleteUser(id) {\n    //     fetch(`/users/${id}`, { method: \"DELETE\" }).then((resp) => {\n    //         console.log(resp)\n    //         if (resp.ok) {\n    //             setUsers((userArr) =>\n    //                 userArr.filter((user) => user.id !== id)\n    //             );\n    //             alert(`user ${loggedIn.username} Deleted!`)\n    //             history.push('/')\n    //         }\n    //     });\n    // }\n\n\n    return (\n        <div>\n            {/* <div>\n                <h1>Edit Info Here</h1>\n            </div>\n\n            {message ? (\n                <div>\n                    <div>{message}</div>\n                </div>\n            ) : (\n                <div>\n                    <div>Edit Account: </div>\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={handleSubmit}\n                    >\n                        <Form>\n                            <br />\n                            <div>\n                                <label htmlFor=\"username\">Username:</label>\n                                <Field type=\"text\" id=\"username\" name=\"username\" />\n                                <ErrorMessage name=\"username\" component=\"div\" />\n                            </div>\n                            <br />\n                            <div>\n                                <label htmlFor=\"email\">Email:</label>\n                                <Field type=\"email\" id=\"email\" name=\"email\" />\n                                <ErrorMessage name=\"email\" component=\"div\" />\n                            </div>\n                            <br />\n                            <div>\n                                <label htmlFor=\"password\">Password:</label>\n                                <Field type=\"password\" id=\"password\" name=\"password\" />\n                                <ErrorMessage name=\"password\" component=\"div\" />\n                            </div>\n                            <br />\n                            <div>\n                                <label htmlFor=\"confirmPassword\">Confirm Password:</label>\n                                <Field type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" />\n                                <ErrorMessage name=\"confirmPassword\" component=\"div\" />\n                            </div>\n                            <br />\n                            <div>\n                                <button type=\"submit\">Save Changes</button>\n                            </div>\n                        </Form>\n                    </Formik> */}\n                    {/* <button on onClick={() => handleDeleteUser(loggedIn.id)}>Delete User</button>\n                </div> */}\n            {/* )} */}\n            <div>\n            <UserEdit \n            loggedIn={loggedIn}\n            setLoggedIn={setLoggedIn}\n            setUsers={setUsers}\n            />\n        </div>\n        </div>\n    )\n}\n\nexport default ProfileManager"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,2CAA2C;AACtE,SAASC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,YAAY,QAAQ,QAAQ;AAC1D,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzD,MAAMC,OAAO,GAAGd,UAAU,CAAC,CAAC;EAC5B,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACsB,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,oBACIS,OAAA;IAAAe,QAAA,eAmDIf,OAAA;MAAAe,QAAA,eACAf,OAAA,CAACH,QAAQ;QACTK,QAAQ,EAAEA,QAAS;QACnBC,WAAW,EAAEA,WAAY;QACzBC,QAAQ,EAAEA;MAAS;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACd,EAAA,CA/HQJ,cAAc;EAAA,QACHT,UAAU;AAAA;AAAA4B,EAAA,GADrBnB,cAAc;AAiIvB,eAAeA,cAAc;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}