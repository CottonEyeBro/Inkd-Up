{"ast":null,"code":"var _jsxFileName = \"/home/draber/Development/Phase-5/Inkd-Up/src/components/LoginForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm({\n  clients\n}) {\n  _s();\n  const [formData, setFormData] = useState({\n    username: '',\n    password: ''\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email address').required('Required'),\n    password: Yup.string().required('Required')\n  });\n\n  // const onSubmit = () => {\n  //     console.log('clicked')\n  //     fetch('/login', {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify(formData),\n  //     })\n  //         .then((resp) => {\n  //             if (resp.ok) {\n  //                 return resp.json();\n  //             } else {\n  //                 alert('Invalid Login Credentials');\n  //             }\n  //         })\n  //         .then((user) => onLogin(user))\n  //         .catch((error) => {\n  //             alert(error.message);\n  //         })\n  //     console.log('Login form submitted:',);\n  // };\n\n  // const onLogin = (user) => {\n  //     // Handle the login logic when the response is successful\n  //     console.log('User logged in:', user);\n  // };\n\n  // const handleLogin = async () => {\n  //     try {\n  //         const response = await fetch('/users') // Fetch customer data\n  //         const userData = await response.json()\n  //         const user = userData.find((user) => user.username === formData.username);\n\n  //         console.log(user)\n  //         if (user && user._password_hash === formData.password) {\n  //             console.log('Login successful')\n  //             console.log(user.id)\n  //         } else {\n  //             console.log('Invalid Login')\n  //         }\n\n  //     } catch (error) {\n  //         console.error('Error fetching customer data', error);\n  //     };\n  // };\n\n  const handleSubmit = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      // Send login request to your backend\n      const response = await fetch('/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values)\n      });\n      if (response.ok) {\n        const client = await response.json();\n        clients(client);\n      } else {\n        const error = await response.json();\n        console.error('Login failed:', error);\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n    setSubmitting(false);\n  };\n  console.log(formData);\n  return (\n    /*#__PURE__*/\n    // <div>\n    //     <div>\n    //         <label>Username:</label>\n    //         <input\n    //             type=\"text\"\n    //             name=\"username\"\n    //             value={formData.username}\n    //             onChange={handleChange}\n    //         />\n    //     </div>\n    //     <div>\n    //         <label htmlFor=\"password\">Password:</label>\n    //         <input\n    //             type=\"password\"\n    //             name=\"password\"\n    //             value={formData.password}\n    //             onChange={handleChange}\n    //         />\n    //     </div>\n    //     <button onClick={handleLogin}>Login</button>\n    // </div>\n    _jsxDEV(Formik, {\n      initialValues: formData,\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            children: \"Username:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"username\",\n            id: \"username\",\n            name: \"username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"username\",\n            component: \"div\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"password\",\n            id: \"password\",\n            name: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"password\",\n            component: \"div\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(LoginForm, \"DRZTgvRIlp23X+umG8KKW8ZcIEw=\");\n_c = LoginForm;\n;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","useEffect","Formik","Field","Form","ErrorMessage","Yup","jsxDEV","_jsxDEV","LoginForm","clients","_s","formData","setFormData","username","password","handleChange","e","name","value","target","validationSchema","object","shape","email","string","required","handleSubmit","values","setSubmitting","response","fetch","method","headers","body","JSON","stringify","ok","client","json","error","console","log","initialValues","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","component","_c","$RefreshReg$"],"sources":["/home/draber/Development/Phase-5/Inkd-Up/src/components/LoginForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nfunction LoginForm({clients}) {\n    const [formData, setFormData] = useState({\n        username: '',\n        password: '',\n    });\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData({\n            ...formData,\n            [name]: value,\n        });\n    };\n\n    const validationSchema = Yup.object().shape({\n        email: Yup.string().email('Invalid email address').required('Required'),\n        password: Yup.string().required('Required'),\n    });\n\n    // const onSubmit = () => {\n    //     console.log('clicked')\n    //     fetch('/login', {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //         },\n    //         body: JSON.stringify(formData),\n    //     })\n    //         .then((resp) => {\n    //             if (resp.ok) {\n    //                 return resp.json();\n    //             } else {\n    //                 alert('Invalid Login Credentials');\n    //             }\n    //         })\n    //         .then((user) => onLogin(user))\n    //         .catch((error) => {\n    //             alert(error.message);\n    //         })\n    //     console.log('Login form submitted:',);\n    // };\n\n    // const onLogin = (user) => {\n    //     // Handle the login logic when the response is successful\n    //     console.log('User logged in:', user);\n    // };\n\n    // const handleLogin = async () => {\n    //     try {\n    //         const response = await fetch('/users') // Fetch customer data\n    //         const userData = await response.json()\n    //         const user = userData.find((user) => user.username === formData.username);\n\n    //         console.log(user)\n    //         if (user && user._password_hash === formData.password) {\n    //             console.log('Login successful')\n    //             console.log(user.id)\n    //         } else {\n    //             console.log('Invalid Login')\n    //         }\n\n    //     } catch (error) {\n    //         console.error('Error fetching customer data', error);\n    //     };\n    // };\n\n    const handleSubmit = async (values, { setSubmitting }) => {\n        try {\n            // Send login request to your backend\n            const response = await fetch('/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(values),\n            });\n\n            if (response.ok) {\n                const client = await response.json();\n                clients(client);\n            } else {\n                const error = await response.json();\n                console.error('Login failed:', error);\n            }\n        } catch (error) {\n            console.error('Error during login:', error);\n        }\n\n        setSubmitting(false);\n    };\n    console.log(formData)\n\n\n\n    return (\n        // <div>\n        //     <div>\n        //         <label>Username:</label>\n        //         <input\n        //             type=\"text\"\n        //             name=\"username\"\n        //             value={formData.username}\n        //             onChange={handleChange}\n        //         />\n        //     </div>\n        //     <div>\n        //         <label htmlFor=\"password\">Password:</label>\n        //         <input\n        //             type=\"password\"\n        //             name=\"password\"\n        //             value={formData.password}\n        //             onChange={handleChange}\n        //         />\n        //     </div>\n        //     <button onClick={handleLogin}>Login</button>\n        // </div>\n        <Formik\n            initialValues={formData}\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n        >\n            <Form>\n                <br />\n                <div>\n                    <label htmlFor=\"username\">Username:</label>\n                    <Field type=\"username\" id=\"username\" name=\"username\" />\n                    <ErrorMessage name=\"username\" component=\"div\" />\n                </div>\n                <br />\n                <div>\n                    <label htmlFor=\"password\">Password:</label>\n                    <Field type=\"password\" id=\"password\" name=\"password\" />\n                    <ErrorMessage name=\"password\" component=\"div\" />\n                </div>\n                <br />\n                <div>\n\n                    <button type=\"submit\">Login</button>\n                </div>\n            </Form>\n        </Formik>\n    );\n};\n\nexport default LoginForm"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}